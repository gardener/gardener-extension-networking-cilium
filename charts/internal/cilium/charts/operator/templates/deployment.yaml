apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: {{ .Release.Namespace }}
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
    {{- if .Values.global.operatorHighAvailability.enabled }}
    high-availability-config.resources.gardener.cloud/type: controller
    {{- end }}
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap-cilium: "{{ .Values.global.configMapHash }}"
{{- if and .Values.global.prometheus.enabled (not .Values.global.prometheus.serviceMonitor.enabled) }}
        prometheus.io/port: {{ .Values.global.operatorPrometheus.port | quote }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 1
        supplementalGroups:
        - 1
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: cilium-operator
        command:
        - cilium-operator
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        {{- if .Values.global.k8sServiceHost }}
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.global.k8sServiceHost | quote }}
        {{- end }}
        {{- if .Values.global.k8sServicePort }}
        - name: KUBERNETES_SERVICE_PORT
          value: {{ .Values.global.k8sServicePort | quote }}
        {{- end }}
        image: {{ index .Values.global.images "cilium-operator" }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
{{- if .Values.global.prometheus.enabled }}
        ports:
        - containerPort: {{ .Values.global.operatorPrometheus.port }}
          hostPort: {{ .Values.global.operatorPrometheus.port }}
          name: prometheus
          protocol: TCP
{{- end }}
        livenessProbe:
          httpGet:
{{- if .Values.global.ipv4.enabled }}
            host: "127.0.0.1"
{{- else }}
            host: '[::1]'
{{- end }}
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
{{- if .Values.global.ipv4.enabled }}
            host: "127.0.0.1"
{{- else }}
            host: '[::1]'
{{- end }}
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
{{- if .Values.global.kubeConfigPath }}
        - name: kube-config
          mountPath: {{ .Values.global.kubeConfigPath }}
          readOnly: true
{{- end }}
{{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
{{- end }}
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      automountServiceAccountToken: true
      tolerations:
      - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
{{- if .Values.global.kubeConfigPath }}
      - hostPath:
          path: {{ .Values.global.kubeConfigPath }}
          type: FileOrCreate
        name: kube-config
{{- end }}
